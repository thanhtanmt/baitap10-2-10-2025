type User {
    id: ID!
    fullname: String!
    email: String!
    password: String!
    phone: String!
    categories: [Category!]!
    products: [Product!]!
}

type Category {
    id: ID!
    name: String!
    images: String
    users: [User!]!
}

type Product {
    id: ID!
    title: String!
    quantity: Int!
    desc: String!
    price: Float!
    user: User!
}

input CreateUserInput {
    fullname: String!
    email: String!
    password: String!
    phone: String!
}

input UpdateUserInput {
    id: ID!
    fullname: String
    email: String
    password: String
    phone: String
}

input CreateCategoryInput {
    name: String!
    images: String
}

input UpdateCategoryInput {
    id: ID!
    name: String
    images: String
}

input CreateProductInput {
    title: String!
    quantity: Int!
    desc: String!
    price: Float!
    userId: ID!
}

input UpdateProductInput {
    id: ID!
    title: String
    quantity: Int
    desc: String
    price: Float
    userId: ID
}

type Query {
    allProductsByPrice: [Product!]!
    productsByCategory(categoryId: ID!): [Product!]!
    allUsers: [User!]!
    userById(id: ID!): User
    allCategories: [Category!]!
    categoryById(id: ID!): Category
    allProducts: [Product!]!
    productById(id: ID!): Product
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!
    createCategory(input: CreateCategoryInput!): Category!
    updateCategory(input: UpdateCategoryInput!): Category!
    deleteCategory(id: ID!): Boolean!
    createProduct(input: CreateProductInput!): Product!
    updateProduct(input: UpdateProductInput!): Product!
    deleteProduct(id: ID!): Boolean!
}